{"version":3,"sources":["components/Wrapper/Wrapper.js","components/EmployeeTable/EmployeeTable.js","components/SearchForm/SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","EmployeeTable","Table","striped","bordered","hover","onClick","handleSortClick","name","employees","map","item","key","id","alt","src","image","occupation","location","SearchForm","Form","inline","Group","controlId","Label","Control","type","placeholder","value","onChange","handleInputChange","Button","variant","handleFormSubmit","App","state","Employees","search","event","target","setState","preventDefault","query","console","log","searchEmployee","filter","result","toLowerCase","includes","length","alert","Jumbotron","fluid","Container","this","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f0cdf213.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Table from \"react-bootstrap/Table\";\r\n\r\nfunction EmployeeTable(props) {\r\n  return (\r\n    <Table striped bordered hover>\r\n      <thead>\r\n        <tr>\r\n          <th>Image</th>\r\n          <th\r\n            onClick={props.handleSortClick}\r\n            name=\"name\"\r\n          >\r\n            Name\r\n          </th>\r\n          <th\r\n            onClick={props.handleSortClick}\r\n            name=\"occupation\"\r\n          >\r\n            Occupation\r\n          </th>\r\n          <th\r\n            onClick={props.handleSortClick}\r\n            name=\"location\"\r\n          >\r\n            Location\r\n          </th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.employees.map(item => (\r\n          <tr key={item.id}>\r\n            <td><img alt={item.name} src={item.image} /></td>\r\n            <td>{item.name}</td>\r\n            <td>{item.occupation}</td>\r\n            <td>{item.location}</td>\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  )\r\n}\r\n\r\nexport default EmployeeTable;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nfunction SearchForm(props) {\r\n  return (\r\n    <Form inline>\r\n      <Form.Group controlId=\"formBasicEmail\" className=\"mx-md-2\">\r\n        <Form.Label className=\"mx-md-2\">Search By Name: </Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"Enter name\"\r\n          className=\"mx-md-2\"\r\n          name=\"search\"\r\n          value={props.value}\r\n          onChange={props.handleInputChange}\r\n        />\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"submit\"\r\n          className=\"mx-md-2\"\r\n          onClick={props.handleFormSubmit}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;","import React from 'react';\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport EmployeeTable from \"./components/EmployeeTable/EmployeeTable\";\nimport SearchForm from \"./components/SearchForm/SearchForm\";\nimport Employees from \"./employees.json\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\n\nclass App extends React.Component {\n  state = {\n    employees: Employees,\n    search: \"\"\n  }\n\n  handleInputChange = event => {\n    // Getting the value and name of the input which triggered the change\n    let value = event.target.value;\n    const name = event.target.name;\n\n    // Updating the input's state\n    this.setState({\n      [name]: value\n    });\n  };\n\n  handleFormSubmit = event => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    event.preventDefault();\n\n    const employees = this.state.employees;\n    let query = this.state.search;\n\n    console.log(\"Query: \" + query);\n\n    const searchEmployee = employees.filter(result => result.name.toLowerCase().includes(query.toLowerCase()))\n\n    if (searchEmployee.length === 0) {\n      // When no match is found\n      console.log(\"No match\");\n      this.setState({\n        employees: Employees,\n        search: \"\"\n      });\n      alert(\"No match found! Please try again!\");\n\n    } else if (query === \"\") {\n      // When no input is detected\n      console.log(\"No query entered\");\n      this.setState({\n        employees: Employees,\n        search: \"\"\n      });\n      alert(\"No query entered! Please try again!\");\n\n    } else {\n      console.log(searchEmployee);\n      this.setState({\n        employees: searchEmployee,\n        search: \"\"\n      })\n    }\n  }\n\n  handleSortClick = event => {\n    event.preventDefault();\n    console.log(\"click\");\n    console.log(this.state.name)\n  }\n\n  render() {\n\n    return (\n      <Wrapper>\n        <Jumbotron fluid>\n          <Container>\n            <h1>Employee Directory</h1>\n            <h5>How to use?</h5>\n            <ol>\n              <li>Enter a name to search employee OR</li>\n              <li>Click on the table headers (Name, Occupation and Location) to sort them ascendingly or descendingly.</li>\n              <li>To reset search list, simply submit the form again to reload the full list</li>\n            </ol>\n          </Container>\n        </Jumbotron>\n        <SearchForm\n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n          handleFormSubmit={this.handleFormSubmit}\n        />\n        <EmployeeTable\n          employees={this.state.employees}\n          handleSortClick={this.handleSortClick}\n        />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}